syntax = "proto3";

package mantis.service;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "mantis_core.proto";
import "registry.proto";

option csharp_namespace = "Mantis.Service.V1";
option go_package = "google.golang.org/mantis/service/v1";
option java_multiple_files = true;
option java_outer_classname = "MantisService";
option java_package = "com.mantis.service.v1";

// Mantis service - pure A2A integration
// 
// For ALL operations, use existing services:
//
// 1. SIMULATION EXECUTION:
//    - a2a.v1.A2AService.SendMessage() - synchronous simulation
//    - a2a.v1.A2AService.SendStreamingMessage() - streaming simulation  
//    - a2a.v1.A2AService.GetTask() - simulation status
//    - a2a.v1.A2AService.CancelTask() - cancellation
//    - a2a.v1.A2AService.TaskSubscription() - streaming updates
//
// 2. AGENT DISCOVERY:
//    - a2a.v1.registry.A2ARegistryService.SearchAgents() - multi-agent discovery with vector search
//    - a2a.v1.registry.A2ARegistryService.ListAllAgents() - list all available agents
//    - a2a.v1.registry.A2ARegistryService.GetAgentCard() - get specific agent details
//
// 3. AGENT MANAGEMENT:
//    - a2a.v1.registry.A2ARegistryService.StoreAgentCard() - register new agents
//    - a2a.v1.registry.A2ARegistryService.UpdateAgentStatus() - update agent availability
//    - a2a.v1.registry.A2ARegistryService.DeleteAgentCard() - remove agents
//
// No custom Mantis RPCs needed - everything is handled by standard A2A and registry services!

// Usage examples:
//
// 1. SIMULATION EXECUTION:
//    a2a.v1.Message msg = {
//      content: [{ data: { data: mantis.core.UserRequest {...} } }]
//    };
//    a2a.v1.Task task = A2AService.SendMessage(msg);
//    mantis.core.SimulationOutput result = task.artifacts[0].parts[0].data.data;
//
// 2. AGENT DISCOVERY:
//    a2a.v1.registry.AgentSearchCriteria criteria = {
//      semantic_query: "strategic planning experts",
//      search_mode: SEARCH_MODE_VECTOR,
//      similarity_threshold: 0.8
//    };
//    a2a.v1.registry.SearchAgentsResponse agents = A2ARegistryService.SearchAgents(criteria);
//
// 3. AGENT REGISTRATION:
//    a2a.v1.registry.RegistryAgentCard card = {...};
//    A2ARegistryService.StoreAgentCard(card);