[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mantis"
version = "0.1.0"
description = "Multi-agent AI framework for strategic divination"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Allen Day", email = "allendy@users.github.com" }
]
dependencies = [
    "pydantic>=2.5.0",
    "pydantic-ai>=0.6.1",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "rich>=13.0.0",
    "rich-click>=1.6.0",
    "click>=8.0.0",
    "uvicorn>=0.24.0",
    "fasta2a==0.5.0",
    "protoc-gen-validate>=1.2.0",
    "a2a-registry==0.1.5",
    "duckduckgo-search>=8.1.0",
    "google-adk>=1.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "build>=1.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
mantis = "mantis.cli:main"

[tool.hatch.version]
path = "src/mantis/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/mantis"]

[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [
    "src/mantis/proto/*_pb2.py",
    "src/mantis/proto/*_pb2_grpc.py",
    "src/mantis/proto/validate/*_pb2.py",
    "src/mantis/proto/validate/*_pb2_grpc.py",
]

[tool.black]
line-length = 120
target-version = ["py311"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true  
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
plugins = ["pydantic.mypy"]
exclude = [
    "src/mantis/proto/",
]

[[tool.mypy.overrides]]
module = "mcp.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "duckduckgo_search.*",
    "dotenv.*",
    "rich.*",
    "uvicorn.*",
    "fasta2a.*",
    "a2a_registry.*",
    "pydantic_ai.*",
    "google.protobuf.*",
    "protobuf_to_pydantic.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "live_integration: marks tests that use live APIs and require API keys",
    "mocked_integration: marks tests that use mocked tool responses but real LLMs", 
    "multi_tool_workflow: marks tests that use multiple tools in complex workflows"
]
